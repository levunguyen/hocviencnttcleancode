1) First, itâ€™s large, and when new employee types are added, it will grow. 
Second, it very clearly does more than one thing. 
Third, it violates the Single Responsibility Principle7 (SRP) because there is more than one reason for it to change. 
Fourth, it violates the Open Closed Principle8 (OCP) because it must change whenever new types are added
-> Example.java

2) Solution
The solution to this problem (see Listing 3-5) is to bury the switch statement in the basement of an ABSTRACT FACTORY,
and never let anyone see it. The factory will use the switch statement to create appropriate instances of the derivatives of Employee, 
and the var- ious functions, such as calculatePay, isPayday, and deliverPay, 
will be dispatched poly- morphically through the Employee interface